package Visitor;
import AST.*;
import Types.*;

public interface VoidVisitor{
    void visit(AddExpression ae);
    void visit(ArrayAssignment aa);
    void visit(ArrayReference ar);
    void visit(Block b);
    void visit(BooleanLiteral bl);
    void visit(CharacterLiteral cl);
    void visit(EmptyStatement es);
    void visit(EqualityExpression ee);
    void visit(ExpressionList el);
    void visit(ExpressionStatement es);
    void visit(FloatLiteral fl);
    void visit(FormalParameter fp);
    void visit(FormalParameterList fpl);
    void visit(FunctionBody fb);
    void visit(FunctionCall fc);
    void visit(FunctionDeclaration fd);
    void visit(Function f);
    void visit(Identifier i);
    void visit(IdentifierValue iv);
    void visit(IfStatement is);
    void visit(IntegerLiteral il);
    void visit(LessThanExpression lte);
    void visit(MultExpression me);
    void visit(ParenExpression pe);
    void visit(PrintLnStatement pls);
    void visit(PrintStatement ps);
    void visit(Program p);
    void visit(ReturnStatement rs);
    void visit(StringLiteral sl);
    void visit(SubtractExpression se);
    void visit(TypeNode tn);
    void visit(UnaryExpression ue);
    void visit(VariableAssignment va);
    void visit(VariableDeclaration vd);
    void visit(WhileStatement ws);
    void visit(Type t);
    void visit(ArrayType at);
    void visit(BooleanType bt);
    void visit(CharType ct);
    void visit(FloatType ft);
    void visit(IntegerType it);
    void visit(StringType st);
    void visit(VoidType vt);
}
